# Generated by Django 2.2.2 on 2019-07-25 23:24

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.IntegerField(default=0, unique=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AvaliableHour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_id', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(max_length=64)),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quota', models.IntegerField(default=0)),
                ('priority', models.IntegerField(default=0)),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
                ('avaliable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.AvaliableHour')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.CourseDetail')),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professors',
            },
            bases=('electives.user',),
        ),
        migrations.CreateModel(
            name='Secretary',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Secretary',
                'verbose_name_plural': 'Secreataries',
            },
            bases=('electives.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
            bases=('electives.user',),
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(default=0)),
                ('period', models.IntegerField(default=0)),
                ('from_date', models.DateField(default=django.utils.timezone.now)),
                ('until_date', models.DateField(default=django.utils.timezone.now)),
                ('from_date_vote', models.DateTimeField(default=django.utils.timezone.now)),
                ('until_date_vote', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
            ],
            options={
                'unique_together': {('year', 'period')},
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_from', models.TimeField()),
                ('time_to', models.TimeField()),
                ('day', models.CharField(max_length=16)),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
            ],
            options={
                'unique_together': {('time_from', 'time_to', 'day')},
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_id', models.CharField(max_length=32, unique=True)),
                ('name', models.CharField(max_length=32)),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Faculty')),
            ],
        ),
        migrations.AddField(
            model_name='coursedetail',
            name='semester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Semester'),
        ),
        migrations.AddField(
            model_name='course',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Program'),
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classroom_id', models.CharField(max_length=8)),
                ('capacity', models.IntegerField(default=0)),
                ('description', models.CharField(max_length=64)),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Faculty')),
            ],
            options={
                'unique_together': {('classroom_id', 'faculty')},
            },
        ),
        migrations.AddField(
            model_name='avaliablehour',
            name='classroom',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Classroom'),
        ),
        migrations.AddField(
            model_name='avaliablehour',
            name='schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Schedule'),
        ),
        migrations.CreateModel(
            name='Enrrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.CourseDetail')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Student')),
            ],
        ),
        migrations.AddField(
            model_name='coursedetail',
            name='proffesor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Professor'),
        ),
        migrations.AlterUniqueTogether(
            name='avaliablehour',
            unique_together={('schedule', 'classroom')},
        ),
        migrations.CreateModel(
            name='StudentVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.CourseSchedule')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Student')),
            ],
            options={
                'unique_together': {('student', 'schedule')},
            },
        ),
        migrations.CreateModel(
            name='ProfessorVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reg', models.DateTimeField()),
                ('date_mod', models.DateTimeField()),
                ('state', models.BooleanField(default=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.CourseSchedule')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='electives.Professor')),
            ],
            options={
                'unique_together': {('professor', 'schedule')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='coursedetail',
            unique_together={('semester', 'course')},
        ),
    ]
